#!/usr/bin/env python3
"""
Script de diagnostic post-installation pour le plugin S3 Proxmox
√Ä ex√©cuter sur le serveur Proxmox pour v√©rifier l'installation
"""

import subprocess
import os
import sys

def run_command(cmd, description=""):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return False, "", str(e)

def print_section(title):
    """Affiche une section avec un titre format√©"""
    print("\n" + "="*60)
    print(f"   {title}")
    print("="*60)

def check_files():
    """V√©rification des fichiers du plugin"""
    print_section("V√âRIFICATION DES FICHIERS")
    
    required_files = [
        "/usr/share/perl5/PVE/Storage/S3Plugin.pm",
        "/usr/share/perl5/PVE/Storage/S3/Client.pm",
        "/usr/share/perl5/PVE/Storage/S3/Config.pm",
        "/usr/share/perl5/PVE/Storage/S3/Auth.pm",
        "/usr/share/perl5/PVE/Storage/S3/Transfer.pm",
        "/usr/share/perl5/PVE/Storage/S3/Metadata.pm",
        "/usr/share/perl5/PVE/Storage/S3/Utils.pm",
        "/usr/share/perl5/PVE/Storage/S3/Exception.pm",
        "/usr/local/bin/pve-s3-backup",
        "/usr/local/bin/pve-s3-restore", 
        "/usr/local/bin/pve-s3-maintenance"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
            
            # V√©rifier les permissions
            stat_info = os.stat(file_path)
            perms = oct(stat_info.st_mode)[-3:]
            
            if file_path.endswith('.pm'):
                if perms != '644':
                    print(f"   ‚ö†Ô∏è  Permissions incorrectes: {perms} (devrait √™tre 644)")
            elif '/bin/' in file_path:
                if perms != '755':
                    print(f"   ‚ö†Ô∏è  Permissions incorrectes: {perms} (devrait √™tre 755)")
        else:
            print(f"‚ùå {file_path} - MANQUANT")
            missing_files.append(file_path)
    
    return len(missing_files) == 0

def check_perl_syntax():
    """V√©rification de la syntaxe Perl"""
    print_section("V√âRIFICATION SYNTAXE PERL")
    
    perl_files = [
        "/usr/share/perl5/PVE/Storage/S3Plugin.pm",
        "/usr/share/perl5/PVE/Storage/S3/Client.pm",
        "/usr/share/perl5/PVE/Storage/S3/Config.pm",
        "/usr/share/perl5/PVE/Storage/S3/Auth.pm",
        "/usr/share/perl5/PVE/Storage/S3/Transfer.pm",
        "/usr/share/perl5/PVE/Storage/S3/Metadata.pm",
        "/usr/share/perl5/PVE/Storage/S3/Utils.pm",
        "/usr/share/perl5/PVE/Storage/S3/Exception.pm"
    ]
    
    all_syntax_ok = True
    for perl_file in perl_files:
        if os.path.exists(perl_file):
            success, stdout, stderr = run_command(f"perl -c {perl_file}")
            if success and "syntax OK" in stderr:
                print(f"‚úÖ {os.path.basename(perl_file)} - Syntaxe OK")
            else:
                print(f"‚ùå {os.path.basename(perl_file)} - ERREUR SYNTAXE:")
                print(f"   {stderr}")
                all_syntax_ok = False
        else:
            print(f"‚ö†Ô∏è  {perl_file} - Fichier manquant")
            all_syntax_ok = False
    
    return all_syntax_ok

def check_services():
    """V√©rification des services Proxmox"""
    print_section("V√âRIFICATION DES SERVICES")
    
    services = ['pvedaemon', 'pveproxy', 'pvestatd']
    all_services_ok = True
    
    for service in services:
        success, stdout, stderr = run_command(f"systemctl is-active {service}")
        if success and stdout == "active":
            print(f"‚úÖ {service} - Actif")
        else:
            print(f"‚ùå {service} - Inactif ou erreur")
            all_services_ok = False
    
    return all_services_ok

def check_storage_config():
    """V√©rification de la configuration storage.cfg"""
    print_section("V√âRIFICATION CONFIGURATION")
    
    config_file = "/etc/pve/storage.cfg"
    
    if not os.path.exists(config_file):
        print(f"‚ùå {config_file} - Fichier manquant")
        return False
    
    with open(config_file, 'r') as f:
        content = f.read()
    
    if 's3:' in content:
        print("‚úÖ Configuration S3 trouv√©e dans storage.cfg")
        print("\nConfiguration S3 actuelle:")
        print("-" * 40)
        
        lines = content.split('\n')
        in_s3_section = False
        for line in lines:
            if line.startswith('s3:'):
                in_s3_section = True
                print(f"üìã {line}")
            elif in_s3_section and line.startswith('    '):
                print(f"   {line}")
            elif in_s3_section and line.strip() == '':
                continue
            elif in_s3_section:
                in_s3_section = False
        
        print("-" * 40)
        return True
    else:
        print("‚ùå Aucune configuration S3 trouv√©e dans storage.cfg")
        return False

def check_pvesm_status():
    """V√©rification du statut via pvesm"""
    print_section("TEST PVESM (GESTIONNAIRE DE STOCKAGE)")
    
    # Test pvesm status g√©n√©ral
    success, stdout, stderr = run_command("pvesm status")
    if success:
        print("‚úÖ pvesm status fonctionne")
        
        # Chercher les stockages S3
        if 's3' in stdout.lower():
            print("‚úÖ Stockage S3 d√©tect√© dans la liste")
            print("\nStockages d√©tect√©s:")
            for line in stdout.split('\n')[1:]:  # Skip header
                if line.strip():
                    print(f"   üì¶ {line}")
        else:
            print("‚ö†Ô∏è  Aucun stockage S3 visible dans la liste")
            print("\nStockages actuels:")
            for line in stdout.split('\n')[1:]:  # Skip header
                if line.strip():
                    print(f"   üì¶ {line}")
    else:
        print(f"‚ùå Erreur pvesm status: {stderr}")
        return False
    
    return True

def check_logs():
    """V√©rification des logs"""
    print_section("V√âRIFICATION DES LOGS")
    
    # Journalctl pour pvedaemon
    success, stdout, stderr = run_command("journalctl -u pvedaemon --since '1 hour ago' | tail -10")
    if success and stdout:
        print("üìã Derniers logs pvedaemon (1h):")
        for line in stdout.split('\n')[-5:]:  # Derni√®res 5 lignes
            if line.strip():
                print(f"   {line}")
    
    # V√©rifier si le fichier de log S3 existe
    s3_log = "/var/log/pve/storage-s3.log"
    if os.path.exists(s3_log):
        print(f"‚úÖ {s3_log} existe")
        with open(s3_log, 'r') as f:
            content = f.read()[-1000:]  # Derniers 1000 caract√®res
            if content.strip():
                print("üìã Contenu r√©cent:")
                print(content)
            else:
                print("üìã Fichier vide")
    else:
        print(f"‚ÑπÔ∏è  {s3_log} n'existe pas encore (normal si pas encore utilis√©)")

def provide_solutions(files_ok, syntax_ok, services_ok, config_ok):
    """Propose des solutions bas√©es sur les r√©sultats"""
    print_section("RECOMMANDATIONS")
    
    if not files_ok:
        print("üîß SOLUTION - Fichiers manquants:")
        print("   Relancez l'installation du plugin:")
        print("   python src/main.py <IP_PROXMOX> <USERNAME>")
    
    if not syntax_ok:
        print("üîß SOLUTION - Erreurs de syntaxe:")
        print("   V√©rifiez que les fichiers ont √©t√© copi√©s correctement")
        print("   Consultez les erreurs Perl ci-dessus")
    
    if not services_ok:
        print("üîß SOLUTION - Services inactifs:")
        print("   systemctl restart pvedaemon pveproxy pvestatd")
    
    if not config_ok:
        print("üîß SOLUTION - Configuration manquante:")
        print("   Ajoutez une configuration S3 dans /etc/pve/storage.cfg")
        print("   Ou relancez l'assistant de configuration")
    
    if files_ok and syntax_ok and services_ok and config_ok:
        print("üéâ TOUT SEMBLE CORRECT!")
        print("Si le stockage n'appara√Æt toujours pas dans l'interface web:")
        print("   1. Videz le cache du navigateur (Ctrl+F5)")
        print("   2. Attendez 30 secondes apr√®s le red√©marrage des services")
        print("   3. V√©rifiez avec: pvesm status")

def main():
    """Fonction principale de diagnostic"""
    print("üîç DIAGNOSTIC PLUGIN S3 PROXMOX")
    print("=" * 60)
    
    # V√©rification root uniquement sur Linux
    try:
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print("‚ùå Ce script doit √™tre ex√©cut√© en tant que root sur le serveur Proxmox")
            sys.exit(1)
        elif os.name == 'nt':
            print("‚ÑπÔ∏è  Script ex√©cut√© sur Windows - pour test uniquement")
            print("üìå Pour diagnostiquer r√©ellement, copiez ce script sur votre serveur Proxmox")
    except:
        pass
    
    # Ex√©cuter toutes les v√©rifications
    files_ok = check_files()
    syntax_ok = check_perl_syntax()
    services_ok = check_services()
    config_ok = check_storage_config()
    
    check_pvesm_status()
    check_logs()
    
    # Proposer des solutions
    provide_solutions(files_ok, syntax_ok, services_ok, config_ok)
    
    # R√©sum√© final
    print_section("R√âSUM√â")
    checks = [
        ("Fichiers pr√©sents", files_ok),
        ("Syntaxe Perl", syntax_ok),
        ("Services actifs", services_ok),
        ("Configuration S3", config_ok)
    ]
    
    all_ok = all(check[1] for check in checks)
    
    for name, status in checks:
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {name}")
    
    if all_ok:
        print("\nüéâ Installation semble correcte!")
        print("üìå Le plugin devrait √™tre visible dans Proxmox > Datacenter > Storage")
    else:
        print("\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s")
        print("üìå Consultez les recommandations ci-dessus")

if __name__ == "__main__":
    main()